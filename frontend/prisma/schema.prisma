// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    accounts Account[]
    sessions Session[]
    practiceSessions PracticeSession[]
    achievements UserAchievement[]
    studyStreaks StudyStreak[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Exam Categories (UPSC, MPSC, IBPS, SSC, etc.)
model ExamCategory {
    id          String   @id @default(cuid())
    name        String   @unique
    description String?
    icon        String?
    color       String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    practiceSessions PracticeSession[]
    questions Question[]
}

// Questions for practice
model Question {
    id              String       @id @default(cuid())
    examCategoryId  String
    questionText    String       @db.Text
    questionType    QuestionType
    difficulty      Difficulty
    options         String[]     // For MCQ questions
    correctAnswer   String
    explanation     String?      @db.Text
    tags            String[]
    createdAt       DateTime     @default(now())
    updatedAt       DateTime     @updatedAt

    examCategory ExamCategory @relation(fields: [examCategoryId], references: [id], onDelete: Cascade)
    practiceSessions PracticeSessionQuestion[]
}

// Practice Sessions
model PracticeSession {
    id              String       @id @default(cuid())
    userId          String
    examCategoryId  String
    sessionName     String
    totalQuestions  Int
    correctAnswers  Int
    score           Float        // Percentage score
    timeSpent       Int          // Time spent in seconds
    completedAt     DateTime     @default(now())
    createdAt       DateTime     @default(now())

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    examCategory ExamCategory @relation(fields: [examCategoryId], references: [id], onDelete: Cascade)
    questions PracticeSessionQuestion[]
}

// Many-to-many relationship between PracticeSession and Question
model PracticeSessionQuestion {
    id                String          @id @default(cuid())
    practiceSessionId String
    questionId        String
    userAnswer        String?
    isCorrect         Boolean
    timeSpent         Int             // Time spent on this question in seconds
    answeredAt        DateTime        @default(now())

    practiceSession PracticeSession @relation(fields: [practiceSessionId], references: [id], onDelete: Cascade)
    question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

    @@unique([practiceSessionId, questionId])
}

// User Achievements
model Achievement {
    id          String   @id @default(cuid())
    name        String   @unique
    description String
    icon        String
    criteria    String   // What needs to be achieved
    points      Int      // Points awarded for this achievement
    createdAt   DateTime @default(now())

    userAchievements UserAchievement[]
}

// User-Achievement relationship
model UserAchievement {
    id            String      @id @default(cuid())
    userId        String
    achievementId String
    earnedAt      DateTime    @default(now())

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

    @@unique([userId, achievementId])
}

// Study Streaks tracking
model StudyStreak {
    id        String   @id @default(cuid())
    userId    String
    startDate DateTime
    endDate   DateTime?
    daysCount Int
    isActive  Boolean  @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Enums
enum QuestionType {
    MULTIPLE_CHOICE
    SINGLE_CHOICE
    TRUE_FALSE
    FILL_IN_THE_BLANK
    ESSAY
}

enum Difficulty {
    EASY
    MEDIUM
    HARD
    EXPERT
}