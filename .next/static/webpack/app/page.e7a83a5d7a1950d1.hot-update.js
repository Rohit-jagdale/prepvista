"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/api.ts":
/*!********************!*\
  !*** ./lib/api.ts ***!
  \********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   api: function() { return /* binding */ api; }\n/* harmony export */ });\n/* harmony import */ var _config_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config/api */ \"(app-pages-browser)/./config/api.ts\");\n// API configuration and utility functions\n\nconst API_BASE_URL = _config_api__WEBPACK_IMPORTED_MODULE_0__.API_CONFIG.BACKEND_URL;\nconst api = {\n    baseUrl: API_BASE_URL,\n    // Create a new practice session with 10 questions\n    createSession: async function(examType, topic) {\n        let difficulty = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"medium\";\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/session\"), {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                exam_type: examType,\n                topic,\n                difficulty\n            })\n        });\n        if (!response.ok) {\n            throw new Error(\"Failed to create session: \".concat(response.statusText));\n        }\n        return response.json();\n    },\n    // Submit an answer for a question\n    submitAnswer: async (sessionId, questionId, selectedAnswer, timeTaken)=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/session/\").concat(sessionId, \"/answer\"), {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                session_id: sessionId,\n                question_id: questionId,\n                selected_answer: selectedAnswer,\n                time_taken: timeTaken\n            })\n        });\n        if (!response.ok) {\n            throw new Error(\"Failed to submit answer: \".concat(response.statusText));\n        }\n        return response.json();\n    },\n    // Complete the session and get results\n    completeSession: async (sessionId)=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/session/\").concat(sessionId, \"/complete\"), {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        if (!response.ok) {\n            throw new Error(\"Failed to complete session: \".concat(response.statusText));\n        }\n        return response.json();\n    },\n    // Get session status\n    getSessionStatus: async (sessionId)=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/session/\").concat(sessionId, \"/status\"));\n        if (!response.ok) {\n            throw new Error(\"Failed to get session status: \".concat(response.statusText));\n        }\n        return response.json();\n    },\n    // Generate questions (legacy - kept for backward compatibility)\n    generateQuestions: async function(examType, topic) {\n        let difficulty = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"medium\", count = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 10;\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/questions\"), {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                exam_type: examType,\n                topic,\n                difficulty,\n                count\n            })\n        });\n        if (!response.ok) {\n            throw new Error(\"Failed to generate questions: \".concat(response.statusText));\n        }\n        return response.json();\n    },\n    // Generate feedback (legacy - kept for backward compatibility)\n    generateFeedback: async (examType, topic, question, userAnswer, correctAnswer, isCorrect)=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/feedback\"), {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                exam_type: examType,\n                topic,\n                question,\n                user_answer: userAnswer,\n                correct_answer: correctAnswer,\n                is_correct: isCorrect\n            })\n        });\n        if (!response.ok) {\n            throw new Error(\"Failed to generate feedback: \".concat(response.statusText));\n        }\n        return response.json();\n    },\n    // Get exam types\n    getExamTypes: async ()=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/exam-types\"));\n        if (!response.ok) {\n            throw new Error(\"Failed to get exam types: \".concat(response.statusText));\n        }\n        return response.json();\n    },\n    // Get topics for exam type\n    getTopics: async (examType)=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/topics/\").concat(examType));\n        if (!response.ok) {\n            throw new Error(\"Failed to get topics: \".concat(response.statusText));\n        }\n        return response.json();\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api.ts\n"));

/***/ })

});